// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @db.ObjectId
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String? @db.String
  accessToken        String? @db.String
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hash String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  myLearning      Course[]  @relation("myLearning")
  createdCourses  Course[]  @relation("createdCourses")
  role   Role @default(USER)
  accounts      Account[]
  
}

model Course{
   id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   subject String

   cover String?
   videoUrl String?
   price Float
   rating Float?
   descriptions String
   requirements String
   whoShouldTake String?
   reviews String
   chapters Chapter[]
   creator       User      @relation("createdCourses", fields: [creatorId], references: [id])
   customer      User?     @relation("myLearning", fields: [customerId], references: [id])
   creatorId String @db.ObjectId
   customerId String? @db.ObjectId

}

model Chapter{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   course Course @relation(fields: [courseId], references: [id])
   courseId String @db.ObjectId
   title String
   lessons Lesson[]

}


model Lesson{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   chapter Chapter @relation(fields: [chapterId], references: [id])
   chapterId String @db.ObjectId
   title String
   lessons String
   questions Question []

}


model Question{
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
   createdAt     DateTime  @default(now())
   updatedAt     DateTime  @updatedAt
   lesson Lesson @relation(fields: [lessonId], references: [id])
   lessonId String @db.ObjectId
   title String
   lessons String
  

}



enum Role{
   USER
    ADMIN
   
}